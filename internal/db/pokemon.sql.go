// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pokemon.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemon (name,
                     height,
                     weight,
                     national_dex_order,
                     base_experience,
                     is_default,
                     sort_order,
                     primary_type,
                     secondary_type,
                     base_attack,
                     base_defense,
                     base_special_attack,
                     base_special_defense,
                     base_speed,
                     base_hp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING id
`

type CreatePokemonParams struct {
	Name               string
	Height             pgtype.Int4
	Weight             pgtype.Int4
	NationalDexOrder   int32
	BaseExperience     pgtype.Int4
	IsDefault          bool
	SortOrder          int32
	PrimaryType        int32
	SecondaryType      pgtype.Int4
	BaseAttack         int32
	BaseDefense        int32
	BaseSpecialAttack  int32
	BaseSpecialDefense int32
	BaseSpeed          int32
	BaseHp             int32
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createPokemon,
		arg.Name,
		arg.Height,
		arg.Weight,
		arg.NationalDexOrder,
		arg.BaseExperience,
		arg.IsDefault,
		arg.SortOrder,
		arg.PrimaryType,
		arg.SecondaryType,
		arg.BaseAttack,
		arg.BaseDefense,
		arg.BaseSpecialAttack,
		arg.BaseSpecialDefense,
		arg.BaseSpeed,
		arg.BaseHp,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getPokemon = `-- name: GetPokemon :one
SELECT id, name, height, weight, national_dex_order, base_experience, is_default, sort_order, primary_type, secondary_type, base_attack, base_defense, base_special_attack, base_special_defense, base_speed, base_hp
FROM pokemon
WHERE id = $1
`

func (q *Queries) GetPokemon(ctx context.Context, id pgtype.UUID) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemon, id)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.NationalDexOrder,
		&i.BaseExperience,
		&i.IsDefault,
		&i.SortOrder,
		&i.PrimaryType,
		&i.SecondaryType,
		&i.BaseAttack,
		&i.BaseDefense,
		&i.BaseSpecialAttack,
		&i.BaseSpecialDefense,
		&i.BaseSpeed,
		&i.BaseHp,
	)
	return i, err
}

const listPokemon = `-- name: ListPokemon :many
SELECT id, name, height, weight, national_dex_order, base_experience, is_default, sort_order, primary_type, secondary_type, base_attack, base_defense, base_special_attack, base_special_defense, base_speed, base_hp
from pokemon
ORDER BY sort_order
`

func (q *Queries) ListPokemon(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, listPokemon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Height,
			&i.Weight,
			&i.NationalDexOrder,
			&i.BaseExperience,
			&i.IsDefault,
			&i.SortOrder,
			&i.PrimaryType,
			&i.SecondaryType,
			&i.BaseAttack,
			&i.BaseDefense,
			&i.BaseSpecialAttack,
			&i.BaseSpecialDefense,
			&i.BaseSpeed,
			&i.BaseHp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
