// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pokemon.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemon (
    name, height, weight, national_dex_order, base_experience, is_default, sort_order
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type CreatePokemonParams struct {
	Name             pgtype.Text
	Height           pgtype.Int4
	Weight           pgtype.Int4
	NationalDexOrder pgtype.Int4
	BaseExperience   pgtype.Int4
	IsDefault        pgtype.Bool
	SortOrder        pgtype.Int4
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createPokemon,
		arg.Name,
		arg.Height,
		arg.Weight,
		arg.NationalDexOrder,
		arg.BaseExperience,
		arg.IsDefault,
		arg.SortOrder,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getPokemon = `-- name: GetPokemon :one
SELECT id, name, height, weight, national_dex_order, base_experience, is_default, sort_order FROM pokemon
WHERE id = $1
`

func (q *Queries) GetPokemon(ctx context.Context, id pgtype.UUID) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemon, id)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Height,
		&i.Weight,
		&i.NationalDexOrder,
		&i.BaseExperience,
		&i.IsDefault,
		&i.SortOrder,
	)
	return i, err
}

const listPokemon = `-- name: ListPokemon :many
SELECT id, name, height, weight, national_dex_order, base_experience, is_default, sort_order from pokemon
ORDER BY sort_order
`

func (q *Queries) ListPokemon(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, listPokemon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Height,
			&i.Weight,
			&i.NationalDexOrder,
			&i.BaseExperience,
			&i.IsDefault,
			&i.SortOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
